---
include:
  - docassemble.AssemblyLine:al_package.yml
  - docassemble.MassAccess:massaccess.yml
  - docassemble.AffidavitofIndigencyMAVC:affidavit_body.yml
  - docassemble.MassAppealsCourt:appeals-basic-questions.yml
---
reconsider: True
code: |
  form_to_file_no_cover = al_court_bundle.as_pdf(key = "final")
---
reconsider: True
code: |
  form_to_sign = al_court_bundle.as_pdf(key = "preview")
---
metadata:
  title: Miscellaneous Motion
---
comment: |
  This section is used by AssemblyLine to control how some of the questions work.
mandatory: True
code: |
  interview_metadata # make sure we initialize the object
  if not defined("interview_metadata['Miscellaneous_Motion']"):
    interview_metadata.initializeObject('Miscellaneous_Motion')
  interview_metadata['Miscellaneous_Motion'].update({
    'title': 'Motion To Stay General',
    'short title': 'Miscellaneous Motion',
    'description': 'Miscellaneous Motion',
    'original_form': '',
    'allowed courts': [
      "Boston Municipal Court",
      "District Court",
      "Superior Court",
      "Housing Court",
      "Probate and Family Court",
      "Juvenile Court",
      "Land Court"
    ],
    'categories': [
    ],
    'logic block variable': 'Miscellaneous_Motion',
    'attachment block variable': 'al_court_bundle',
    'typical role': 'unknown',
  })
---
features:
  javascript:
    - limit_upload_size.js
---
code: |
  bcc_failsafe = "cc@example.com"
---
code: |
  interview_short_title = "Appeals Court Miscellaneous Motion"
---
objects:
  - prepping_exhibits: DAFile.using(filename='exhibits.pdf')
---
id: interview order
mandatory: True
code: |
  appeals_basic_questions_intro_screen
  users[0].name.first
  users[0].address.address
  users[0].mobile_number
  user_needs_interpreter
  users.there_is_another = False
  users.gathered = True
  user_ask_role
  other_parties.there_are_any = True
  plaintiffs.gather()
  defendants.gather()
  other_parties.gather()
  
  if other_party_has_attorney:
    other_parties[0].attorney.there_are_any = True
    other_parties[0].attorney.gather()
  
  #plaintiffs
  #defendants
  #
  ## to avoid triggering affidavit questions
  #user_role = DAEmpty
  #users.there_is_another = False
  #other_parties.there_are_any = False
  
  trial_court
  trial_court_docket_number
  
  if not is_first_document:
    appeals_court_docket_number
  else:
    explain_need_affidavit
    
  motion_title
  relief_sought
  basis_for_relief
  
  # WARNING: file size error is not currently translatable
  file_size_vars
  if has_evidence:
    review_exhibits
    ocr_task
  
  method_of_service
  #parties_to_be_served
  service_date
  
  if is_first_document:
    indigency_intro
    fees['Filing fee'].waive = True
    fees['Filing fee'].amount = 315.00
    ask_affidavit_questions
    if not is_indigent:
      doesnt_qualify_interstitial
  
  basic_questions_signature_flow
  users[0].signature
  if is_indigent:
    download
  else: 
    not_indigent_download
---
code: |
  max_mb_per_file = 15
  file_size_vars = True
---
need: prepping_exhibits
code: |
  ocr_task = background_action('process_exhibits')
---
event: process_exhibits
code: |
  prepping_exhibits.initialize(filename="exhibits.pdf")
  prepping_exhibits.make_ocr_pdf(exhibits, psm=1)
  prepping_exhibits.bates_number(prefix='EX-')
  background_response_action('save_results',results=prepping_exhibits)
---
event: save_results
code: |
  prepped_exhibits = action_argument('results')
  background_response()
---
id: trial court division 
question: | 
  Select the **Trial Court** department and division where your case was heard.
fields:
  - no label: trial_court
    datatype: object
    choices: macourts.filter_courts(["Boston Municipal Court",
      "District Court",
      "Superior Court",
      "Housing Court",
      "Probate and Family Court",
      "Juvenile Court",
      "Land Court"])
--- 
id: trial court docket number 
question: |
  What is the **Trial Court** docket number for your case?
fields:
  - Docket number: trial_court_docket_number
--- 
id: appeals court docket number 
question: |
  Is this the first document you are filing in the **Appeals Court**?
fields:
  - no label: is_first_document
    datatype: yesnoradio
  - What is the **Appeals Court** docket number for your case?: appeals_court_docket_number
    show if:
      variable: is_first_document
      is: False
---
id: explain_need_affidavit
question: |
  You may qualify for a fee waiver.
subquestion: |
  There is a filing fee, but you may qualify to get the fees waived.
  
  We will ask you questions to help you find out a little later.
continue button field: explain_need_affidavit
---
id: explain affidavit of indigency
continue button field: indigency_intro
question: |
  Fee waiver questions
subquestion: |
  The next questions will be used to find out if you
  qualify for a fee waiver. The filing fee is $315.00.
---
code: |
  max_mb_per_file = 15
  file_size_vars = True
---
id: motion title
question: |
  What is the title of your Motion?
subquestion: |  
  The title should indicate the type of relief you are seeking in your Motion.
fields:
  - no label: motion_title
    input type: radio
    choices:
      - Motion for leave to file supplemental appendix: FOR LEAVE TO FILE SUPPLEMETAL APPENDIX
      - Motion for leave to file sur-reply brief: FOR LEAVE TO FILE SUR-REPLY BRIEF
      - Motion to compel assembly of the record: TO COMPEL ASSEMBLY OF THE RECORD
      - Other: Other
  - Other: other_motion_title
    js show if: |
      val("motion_title") == "Other"
---
id: relief sought
question: |
  What relief are you seeking?
subquestion: |
  Provide a detailed description and be as specific as possible.
fields:
  - no label: relief_sought
    input type: area
    rows: 6
---
id: basis for relief 
question: |
  What is the basis for the relief you are requesting?
subquestion: |
  Provide a detailed description and be as specific as possible, including citation to any relevant statutes or rules.  
fields:
  - no label: basis_for_relief 
    input type: area
    rows: 6
---
id: method of service
question: |
  % if other_party_has_attorney: 
  
  **How** will you deliver the required copies of the motion, memorandum, and supporting materials to **${ other_parties[0].attorney }**?
  
  % else:
  
  **How** will you deliver the required copies of the motion, memorandum, and supporting materials to **${ other_parties }**?
  
  % endif
subquestion: |
  % if other_party_has_attorney: 
  
  You are required to provide a copy of this motion, memorandum, and supporting materials to **${ other_parties[0].attorney }**.
  
  % else:
  
  Since **${ other_parties }'s** does not have an attorney, you are required to serve **${ other_parties }** with a copy of this motion, memorandum, and supporting materials.  
  
  % endif
  
  You should **not** provide a copy of your Affidavit of Indigency, if any, to anyone except the Appeals Court.  
field: method_of_service
dropdown:
  - Efile and serve (efilema.com): efile and serve (efilema.com)
  - Email: email
  - Mail: mail
  - Hand delivery: hand delivery
---
objects:
  - attorneys: ALPeopleList.using(there_are_any=True)
  - other_parties[i].attorney: PeopleList
---
id: other parties attorney trigger
question: |
  Does **${ other_parties }** have an attorney?
yesno: other_party_has_attorney
---
id: other parties another attorney
question: |
  Does **${ other_parties }** have another attorney?
yesno: other_parties[i].attorney.there_is_another
---
id: other parties attorney name
sets:
  - other_parties[i].attorney.name.first
  - other_parties[i].attorney.name.last
generic object: ALIndividual
question: |
  What is **${ other_parties }'s** attorney's name?
fields:
  - code: |
      other_parties[i].attorney.name_fields()
---
id: other parties attorney address
generic object: ALIndividual
sets:
  - other_parties[i].attorney.address.address
  - other_parties[i].attorney.address.city
  - other_parties[i].attorney.address.zip
question: |
  What is **${ other_parties[0].attorney }'s** address?
fields:
  - code: |
      other_parties[i].attorney.address_fields()
---
id: other parties attorney email
generic object: ALIndividual
question: |
  What is **${ other_parties[0].attorney }'s** email address?
fields:
  - Email: other_parties[i].attorney.email
    datatype: email
#---
#id: parties to be served
#question: |
#  List the name and address (or email address) of each attorney or self-represented party that you will deliver copies of your Motion, memorandum, and supporting materials to.
#subquestion: |
#  If you are serving more than one attorney or party, you may list more than one.
#fields:
#  - no label: parties_to_be_served
#    input type: area 
#    rows: 6
---
id: service date
question: |
  % if other_party_has_attorney: 
  
  **When** will you deliver the required copies of the motion, memorandum, and supporting materials to **${ other_parties[0].attorney }**?
  
  % else:
  
  **When** will you deliver the required copies of the motion, memorandum, and supporting materials to **${ other_parties }**?
  
  % endif
subquestion: |
  % if other_party_has_attorney: 
  
  You are required to provide a copy of this motion, memorandum, and supporting materials to **${ other_parties[0].attorney }**.
  
  % else:
  
  Since **${ other_parties }'s** does not have an attorney, you are required to serve **${ other_parties }** with a copy of this motion, memorandum, and supporting materials.  
  
  % endif
fields:
  - Date: service_date
    datatype: date
    min: ${ today() }
---
code: |
  if is_first_document and is_indigent:
    final_form_to_file = [general_cover_sheet, combined_motion, affidavitofindigency_attachment]
  else:
    final_form_to_file = [general_cover_sheet, combined_motion ]
---
code: |
  form_to_file_no_cover = combined_motion
---
id: review before signature
need: form_to_sign
continue button field: preview_screen
question: |
  Nearly finished
subquestion: |
  You are almost done! Click on the form below. It will open in a new window so you can review it and make sure it is correct.
  
  Do not forget to come back to this page to click to the final step of signing and sending the form to the court. 
  
   ${ form_to_sign }

progress: 95
---
id: download form not indigent
event: not_indigent_download
question: |
  Review & Download
subquestion: |
  **[:file-download: Your Motion]( ${ al_court_bundle.as_pdf(key='final').url_for() })** is ready to download. You must download it, send to the ${ courts[0] }, and pay the filing fee. 
  
  1. Click "View" below to open the form in a new window.
  1. Click "Download" below to save a copy to send to the ${ courts[0] }.
  
  For help, call the Appeals Court Clerk's Office: 617-921-4443 
  
  The Appeals Court Clerk's Office is open:  
  Monday - Friday  
  8:30am - 4:30pm
  
  ${ al_user_bundle.download_list_html() }
  
  ${ al_user_bundle.send_button_html() }
  
progress: 100
---
id: download form
event: download
decoration: file-download
question: |
  % if not defined('email_success') or not email_success:
  Review, Download, and Send Form
  % else:
  Form delivered
  % endif
subquestion: |
  % if not defined('email_success') or not email_success:
  **[:file-download: Your Motion]( ${ al_court_bundle.as_pdf(key='final').url_for() })** is ready to send to the ${ courts[0] }. It is not delivered until you complete the delivery process.
  
  **To deliver your Motion to the ${ courts[0] }:**
  
  1. Click "View" below to open the form in a new window.
  1. Click "Download" below to save or print a copy for your records.
  1. Click "Submit to ${courts[0]}" to send your Motion to the ${courts[0]}. 
  
  You will have a chance to add instructions to the clerk and see the cover page before final delivery.
  
  % else:
  If you do not hear from the court in 1 business day, call the   
  Appeals Court Clerk's Office: 617-921-4443 
  
  The Appeals Court Clerk's Office is open:  
  Monday - Friday  
  8:30am - 4:30pm
  
  % endif
  
  % if not defined('email_success') or not email_success:
    ${ action_button_html( url_action('form_delivery_complete'), id_tag="submitToCourt", label="Submit to " + str(courts[0].name), icon=send_icon, size="md", color="primary")}
    
  % else:
    Your email has already been delivered to ${courts[0]}
    
  [:file-download: Your Motion](${final_form_to_file.url_for(attachment=True)})

  % endif
  
  ${ al_user_bundle.download_list_html() }
  
  ${ al_user_bundle.send_button_html() }
  
progress: 100
section: download
---
code: |
  if has_evidence:
    if not ocr_task.ready():
      waiting_screen
    if not prepped_exhibits.ok:
      exhibits_attachment.enabled = False
    else:      
      prepped_exhibits.set_attributes(private=False)
      if prepped_exhibits.size_in_bytes() < 10 * 1024 * 1024:
        exhibits_attachment.enabled = True
      else:
        exhibits_attachment.enabled = False
  else:
    exhibits_attachment.enabled = False
---
code: |
  affidavitofindigency_included.enabled = is_first_document and is_indigent
---
#TODO:
code: |
  combined_motion = al_court_bundle.as_pdf(key='final')
---
event: waiting_screen
reload: True
question: |
  <i class="fas fa-cog fa-spin"></i> Wait while we process your documents . . . <i class="fas fa-cog fa-spin"></i>
---
objects:
  - motion_attachment: DADict
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[motion_attachment, exhibits_attachment, affidavitofindigency_included], filename="Miscellaneous_Motion", title="Miscellaneous Motion")
  - al_court_bundle: ALDocumentBundle.using(elements=[motion_attachment, exhibits_attachment, affidavitofindigency_included], filename="Miscellaneous_Motion", title="Miscellaneous Motion")
---
objects:
  - motion_attachment: ALDocument.using(title='Miscellaneous Motion', filename='Miscellaneous_Motion', has_addendum=False, enabled=True)
  - exhibits_attachment: ALDocument.using(title='Exhibits', filename='exhibits', has_addendum=False)
  - affidavitofindigency_included: ALDocument.using(title='Affidavit of Indigency', filename='Affidavit_of_Indigency', has_addendum=False)
---
code: |
  exhibits_attachment[i] = prepped_exhibits
---
code: |
  affidavitofindigency_included[i] = affidavitofindigency_attachment
---
attachment:
  - name: Miscellaneous Motion
    variable name: motion_attachment[i]
    filename: Miscellaneous_Motion
    docx template file: miscellaneous_motion.docx
---
objects:
  - exhibits: DAFileList.using(auto_gather=False, gathered=True)
---
id: record appendix
question: |
  You may submit copies of relevant Trial Court documents. 
fields:
  - Do you have any documents that you would like to attach to your Motion?: has_evidence
    datatype: yesnoradio
  - Tap "browse" and choose all of the documents you want to upload at once. You can edit or add additional documents on the next screen.: exhibits
    datatype: files
    show if: has_evidence
    maximum image size: 1024
    image upload type: jpeg    
    accept: |
      "image/*, image/png,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"
validation code: |
  if has_evidence and sum(exhibit.size_in_bytes() for exhibit in exhibits) > (15 * 1024 * 1024):
    validation_error("Upload a file smaller than 15 MB.")
---
table: exhibits.table
rows: exhibits
allow reordering: True
columns:
  - File name: showifdef(row_item.attr_name('filename'))
  # - Size: row_item.size_in_bytes() / 1024 / 1024
  - Thumbnail: row_item.show(width="100px")  
delete buttons: True
---
id: add additional document
question: |
  Exhibit document ${i+1}  
fields:
  - no label: exhibits[i]
    datatype: file
    accept: |
      "image/*, image/png,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"   
validation code: |
  # Upload field creates a DAFileList
  # We want it to be a plain DAFile instead
  if isinstance(exhibits[i], DAFileList):
    temp_name = exhibits[i].instanceName
    exhibits[i] = next(iter(exhibits[i]))
    # Make sure the "instanceName" shows the correct position in the list,
    # instead of showing a nested DAFileList's instanceName
    exhibits[i].instanceName = temp_name
---
id: review exhibits
question: |
  Review your exhibits
subquestion: |
  Look at the exhibits below. If you want to change the order, use the arrows
  to move an exhibit up or down in the list. Click "delete" or "add another"
  to change which exhibits you send to the court.
  
  ${ exhibits.table }
  
  ${exhibits.add_action() }
continue button field: review_exhibits 
---
---
id: email to court
template: email_to_court_template
subject: |
  MassAccess submission from ${users} intended for ${courts[0]}
content: |
  % if has_evidence and prepped_exhibits.ok and prepped_exhibits.size_in_bytes() > 10 * 1024 * 1024:
  **The user provided an attachment that is too large to email.**
  [Link to exhibits](${ prepped_exhibits.url_for(external=True) } )
  % endif
  
  At ${current_datetime().format_datetime()},
  ${users} submitted the attached ${package_title} form(s).

  &nbsp;        | &nbsp;
  --------------|-----------
  Date of email | ${current_datetime().format_datetime()}
  Pages | ${num_package_pages }  
  Preferred language | ${ user_preferred_language if user_needs_interpreter else 'English' }
  Mobile phone | ${showifdef('users[0].mobile_number')}
  Other phone | ${showifdef('users[0].phone_number')}
  Email | ${showifdef('users[0].email')}
  Contact details/other | ${showifdef('users[0].other_contact_method')}
  
  Comments for clerk: 
  
  ${ showifdef('comments_to_clerk')}
  
  Please contact ${users} in the next business day to
  confirm that you received this message.